// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "ociregistry/api/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (CONNECT /)
	Connect(ctx echo.Context) error

	// (GET /v2/)
	V2Default(ctx echo.Context) error

	// (GET /v2/auth)
	V2Auth(ctx echo.Context, params V2AuthParams) error

	// (DELETE /v2/{image}/blobs/{digest})
	V2DeleteImageBlobsDigest(ctx echo.Context, image string, digest string) error

	// (GET /v2/{image}/blobs/{digest})
	V2GetImageBlobsDigest(ctx echo.Context, image string, digest string) error

	// (HEAD /v2/{image}/blobs/{digest})
	V2HeadImageBlobsDigest(ctx echo.Context, image string, digest string) error

	// (DELETE /v2/{image}/manifests/{reference})
	V2DeleteImageManifestsReference(ctx echo.Context, image string, reference string) error

	// (GET /v2/{image}/manifests/{reference})
	V2GetImageManifestsReference(ctx echo.Context, image string, reference string, params V2GetImageManifestsReferenceParams) error

	// (HEAD /v2/{image}/manifests/{reference})
	V2HeadImageManifestsReference(ctx echo.Context, image string, reference string, params V2HeadImageManifestsReferenceParams) error

	// (PUT /v2/{image}/manifests/{reference})
	V2PutImageManifestsReference(ctx echo.Context, image string, reference string) error

	// (POST /v2/{name}/blobs/uploads)
	V2PostNameBlobsUploads(ctx echo.Context, name string, params V2PostNameBlobsUploadsParams) error

	// (GET /v2/{name}/blobs/uploads/{reference})
	V2GetNameBlobsUploadsReference(ctx echo.Context, name string, reference string) error

	// (PATCH /v2/{name}/blobs/uploads/{reference})
	V2PatchNameBlobsUploadsReference(ctx echo.Context, name string, reference string) error

	// (PUT /v2/{name}/blobs/uploads/{reference})
	V2PutNameBlobsUploadsReference(ctx echo.Context, name string, reference string, params V2PutNameBlobsUploadsReferenceParams) error

	// (GET /v2/{name}/referrers/{digest})
	V2GetNameReferrersDigest(ctx echo.Context, name string, digest string, params V2GetNameReferrersDigestParams) error

	// (GET /v2/{name}/tags/list)
	V2GetNameTagsList(ctx echo.Context, name string, params V2GetNameTagsListParams) error

	// (DELETE /v2/{org}/{image}/blobs/{digest})
	V2DeleteOrgImageBlobsDigest(ctx echo.Context, org string, image string, digest string) error

	// (GET /v2/{org}/{image}/blobs/{digest})
	V2GetOrgImageBlobsDigest(ctx echo.Context, org string, image string, digest string) error

	// (HEAD /v2/{org}/{image}/blobs/{digest})
	V2HeadOrgImageBlobsDigest(ctx echo.Context, org string, image string, digest string) error

	// (DELETE /v2/{org}/{image}/manifests/{reference})
	V2DeleteOrgImageManifestsReference(ctx echo.Context, org string, image string, reference string) error

	// (GET /v2/{org}/{image}/manifests/{reference})
	V2GetOrgImageManifestsReference(ctx echo.Context, org string, image string, reference string, params V2GetOrgImageManifestsReferenceParams) error

	// (HEAD /v2/{org}/{image}/manifests/{reference})
	V2HeadOrgImageManifestsReference(ctx echo.Context, org string, image string, reference string, params V2HeadOrgImageManifestsReferenceParams) error

	// (PUT /v2/{org}/{image}/manifests/{reference})
	V2PutOrgImageManifestsReference(ctx echo.Context, org string, image string, reference string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Connect converts echo context to params.
func (w *ServerInterfaceWrapper) Connect(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Connect(ctx)
	return err
}

// V2Default converts echo context to params.
func (w *ServerInterfaceWrapper) V2Default(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2Default(ctx)
	return err
}

// V2Auth converts echo context to params.
func (w *ServerInterfaceWrapper) V2Auth(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params V2AuthParams
	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "service" -------------

	err = runtime.BindQueryParameter("form", true, false, "service", ctx.QueryParams(), &params.Service)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2Auth(ctx, params)
	return err
}

// V2DeleteImageBlobsDigest converts echo context to params.
func (w *ServerInterfaceWrapper) V2DeleteImageBlobsDigest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithLocation("simple", false, "digest", runtime.ParamLocationPath, ctx.Param("digest"), &digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2DeleteImageBlobsDigest(ctx, image, digest)
	return err
}

// V2GetImageBlobsDigest converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetImageBlobsDigest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithLocation("simple", false, "digest", runtime.ParamLocationPath, ctx.Param("digest"), &digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetImageBlobsDigest(ctx, image, digest)
	return err
}

// V2HeadImageBlobsDigest converts echo context to params.
func (w *ServerInterfaceWrapper) V2HeadImageBlobsDigest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithLocation("simple", false, "digest", runtime.ParamLocationPath, ctx.Param("digest"), &digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2HeadImageBlobsDigest(ctx, image, digest)
	return err
}

// V2DeleteImageManifestsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2DeleteImageManifestsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2DeleteImageManifestsReference(ctx, image, reference)
	return err
}

// V2GetImageManifestsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetImageManifestsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetImageManifestsReferenceParams
	// ------------- Optional query parameter "ns" -------------

	err = runtime.BindQueryParameter("form", true, false, "ns", ctx.QueryParams(), &params.Ns)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ns: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetImageManifestsReference(ctx, image, reference, params)
	return err
}

// V2HeadImageManifestsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2HeadImageManifestsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V2HeadImageManifestsReferenceParams
	// ------------- Optional query parameter "ns" -------------

	err = runtime.BindQueryParameter("form", true, false, "ns", ctx.QueryParams(), &params.Ns)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ns: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2HeadImageManifestsReference(ctx, image, reference, params)
	return err
}

// V2PutImageManifestsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2PutImageManifestsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2PutImageManifestsReference(ctx, image, reference)
	return err
}

// V2PostNameBlobsUploads converts echo context to params.
func (w *ServerInterfaceWrapper) V2PostNameBlobsUploads(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V2PostNameBlobsUploadsParams
	// ------------- Optional query parameter "digest" -------------

	err = runtime.BindQueryParameter("form", true, false, "digest", ctx.QueryParams(), &params.Digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// ------------- Optional query parameter "mount" -------------

	err = runtime.BindQueryParameter("form", true, false, "mount", ctx.QueryParams(), &params.Mount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mount: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2PostNameBlobsUploads(ctx, name, params)
	return err
}

// V2GetNameBlobsUploadsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetNameBlobsUploadsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetNameBlobsUploadsReference(ctx, name, reference)
	return err
}

// V2PatchNameBlobsUploadsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2PatchNameBlobsUploadsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2PatchNameBlobsUploadsReference(ctx, name, reference)
	return err
}

// V2PutNameBlobsUploadsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2PutNameBlobsUploadsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V2PutNameBlobsUploadsReferenceParams
	// ------------- Optional query parameter "digest" -------------

	err = runtime.BindQueryParameter("form", true, false, "digest", ctx.QueryParams(), &params.Digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2PutNameBlobsUploadsReference(ctx, name, reference, params)
	return err
}

// V2GetNameReferrersDigest converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetNameReferrersDigest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithLocation("simple", false, "digest", runtime.ParamLocationPath, ctx.Param("digest"), &digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetNameReferrersDigestParams
	// ------------- Optional query parameter "artifactType" -------------

	err = runtime.BindQueryParameter("form", true, false, "artifactType", ctx.QueryParams(), &params.ArtifactType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifactType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetNameReferrersDigest(ctx, name, digest, params)
	return err
}

// V2GetNameTagsList converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetNameTagsList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetNameTagsListParams
	// ------------- Optional query parameter "n" -------------

	err = runtime.BindQueryParameter("form", true, false, "n", ctx.QueryParams(), &params.N)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter n: %s", err))
	}

	// ------------- Optional query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, false, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetNameTagsList(ctx, name, params)
	return err
}

// V2DeleteOrgImageBlobsDigest converts echo context to params.
func (w *ServerInterfaceWrapper) V2DeleteOrgImageBlobsDigest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org", runtime.ParamLocationPath, ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithLocation("simple", false, "digest", runtime.ParamLocationPath, ctx.Param("digest"), &digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2DeleteOrgImageBlobsDigest(ctx, org, image, digest)
	return err
}

// V2GetOrgImageBlobsDigest converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetOrgImageBlobsDigest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org", runtime.ParamLocationPath, ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithLocation("simple", false, "digest", runtime.ParamLocationPath, ctx.Param("digest"), &digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetOrgImageBlobsDigest(ctx, org, image, digest)
	return err
}

// V2HeadOrgImageBlobsDigest converts echo context to params.
func (w *ServerInterfaceWrapper) V2HeadOrgImageBlobsDigest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org", runtime.ParamLocationPath, ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "digest" -------------
	var digest string

	err = runtime.BindStyledParameterWithLocation("simple", false, "digest", runtime.ParamLocationPath, ctx.Param("digest"), &digest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digest: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2HeadOrgImageBlobsDigest(ctx, org, image, digest)
	return err
}

// V2DeleteOrgImageManifestsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2DeleteOrgImageManifestsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org", runtime.ParamLocationPath, ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2DeleteOrgImageManifestsReference(ctx, org, image, reference)
	return err
}

// V2GetOrgImageManifestsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetOrgImageManifestsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org", runtime.ParamLocationPath, ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetOrgImageManifestsReferenceParams
	// ------------- Optional query parameter "ns" -------------

	err = runtime.BindQueryParameter("form", true, false, "ns", ctx.QueryParams(), &params.Ns)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ns: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetOrgImageManifestsReference(ctx, org, image, reference, params)
	return err
}

// V2HeadOrgImageManifestsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2HeadOrgImageManifestsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org", runtime.ParamLocationPath, ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V2HeadOrgImageManifestsReferenceParams
	// ------------- Optional query parameter "ns" -------------

	err = runtime.BindQueryParameter("form", true, false, "ns", ctx.QueryParams(), &params.Ns)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ns: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2HeadOrgImageManifestsReference(ctx, org, image, reference, params)
	return err
}

// V2PutOrgImageManifestsReference converts echo context to params.
func (w *ServerInterfaceWrapper) V2PutOrgImageManifestsReference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org", runtime.ParamLocationPath, ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "image" -------------
	var image string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image", runtime.ParamLocationPath, ctx.Param("image"), &image)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image: %s", err))
	}

	// ------------- Path parameter "reference" -------------
	var reference string

	err = runtime.BindStyledParameterWithLocation("simple", false, "reference", runtime.ParamLocationPath, ctx.Param("reference"), &reference)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reference: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2PutOrgImageManifestsReference(ctx, org, image, reference)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.CONNECT(baseURL+"/", wrapper.Connect)
	router.GET(baseURL+"/v2/", wrapper.V2Default)
	router.GET(baseURL+"/v2/auth", wrapper.V2Auth)
	router.DELETE(baseURL+"/v2/:image/blobs/:digest", wrapper.V2DeleteImageBlobsDigest)
	router.GET(baseURL+"/v2/:image/blobs/:digest", wrapper.V2GetImageBlobsDigest)
	router.HEAD(baseURL+"/v2/:image/blobs/:digest", wrapper.V2HeadImageBlobsDigest)
	router.DELETE(baseURL+"/v2/:image/manifests/:reference", wrapper.V2DeleteImageManifestsReference)
	router.GET(baseURL+"/v2/:image/manifests/:reference", wrapper.V2GetImageManifestsReference)
	router.HEAD(baseURL+"/v2/:image/manifests/:reference", wrapper.V2HeadImageManifestsReference)
	router.PUT(baseURL+"/v2/:image/manifests/:reference", wrapper.V2PutImageManifestsReference)
	router.POST(baseURL+"/v2/:name/blobs/uploads", wrapper.V2PostNameBlobsUploads)
	router.GET(baseURL+"/v2/:name/blobs/uploads/:reference", wrapper.V2GetNameBlobsUploadsReference)
	router.PATCH(baseURL+"/v2/:name/blobs/uploads/:reference", wrapper.V2PatchNameBlobsUploadsReference)
	router.PUT(baseURL+"/v2/:name/blobs/uploads/:reference", wrapper.V2PutNameBlobsUploadsReference)
	router.GET(baseURL+"/v2/:name/referrers/:digest", wrapper.V2GetNameReferrersDigest)
	router.GET(baseURL+"/v2/:name/tags/list", wrapper.V2GetNameTagsList)
	router.DELETE(baseURL+"/v2/:org/:image/blobs/:digest", wrapper.V2DeleteOrgImageBlobsDigest)
	router.GET(baseURL+"/v2/:org/:image/blobs/:digest", wrapper.V2GetOrgImageBlobsDigest)
	router.HEAD(baseURL+"/v2/:org/:image/blobs/:digest", wrapper.V2HeadOrgImageBlobsDigest)
	router.DELETE(baseURL+"/v2/:org/:image/manifests/:reference", wrapper.V2DeleteOrgImageManifestsReference)
	router.GET(baseURL+"/v2/:org/:image/manifests/:reference", wrapper.V2GetOrgImageManifestsReference)
	router.HEAD(baseURL+"/v2/:org/:image/manifests/:reference", wrapper.V2HeadOrgImageManifestsReference)
	router.PUT(baseURL+"/v2/:org/:image/manifests/:reference", wrapper.V2PutOrgImageManifestsReference)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yZUU/bMBDHv0p0zyFJC9tD3higrRIDxNheJh6Mc00sJbaxnbKuynefnCZjLU3WemVQ",
	"1KdGdf5n3893l5wzA/xhUHGSnwqqIZ5VPjA+FhDPgApuCDXzPxPUVDFpmOAQw1WZ5weC51NP2iuTKVGm",
	"mUcJzRhPPYUp00ZNwYecUeQarT1OCoQYjiWhGXrDIAIfSpVDDJkxMg7Dh4eHgNSjgVBp2Eh1eD46Obv4",
	"cnYwDKIgM0UOlQ+GmdxauzwZedfNdN6BdymRH1+NvMPa+gSVni94EERBZHVCIieSQQyHQRQcgg+SmMx6",
	"DmHjNMfaaXurItbhUQIxnDQDPijUUtiF2ZuGUWQBVVXlQzgZ1jZSXKH/NjzFMSnzLgs+HD1eDBZsktJk",
	"PXaP7bD1Q5ECDSoN8fcZMOt2hiRBBX7L3loSiv2s5fVC7kumMIHYqBJ90DTDgthJzFRagTaK8RSqym8s",
	"3pdY72tjUFMhEVyEqCaM9ktvu0ktApqxgqRYhXe5uNPhLGEpalNZSYI5Gly9G3ZkZIUfrOy0FnVwtDHy",
	"uPZ6Nid6i3aSdsr1DT1FMmyRHLUX7+Zs/K54+Yhm992OFty23tpYX+XuJyTJ2/N3KfILwtkYtdHhTOEY",
	"FXKK6yfA51Z93Wr/KyD1x6xbSYXIOSd2kkRHieUanj2n9rwWeMlyZXRdleYt5dmgoxbZadqHcClzQZJa",
	"IIVeTUVoc0GKeV3+2ty/Do/6Zwsb/rswb6wsRMmdhGMlCnCi3VneevkvPw66y9/yTmwWos5b8jwRevQ0",
	"M4mh2cootANvyvknb4SD93+vTztMwD27e0pbf47VC1WoFpuN/uS6bjUbvIJuiavDG2gHVKIMGxNqbqbS",
	"uXfrR2tIqsOczR8Z/URvSKrP2XOjXH5LcCn7Odk4ErsoCZVW/9DwXqrUqRkSKt1CIO5+57zn59gu7MFt",
	"ltrOHX0L2rHZeF28X8fRwB7pC50x7MG/yGHFHvs6px6VX3/FaEE8fsrScRgKytqvYCGRLJwMobqtfgUA",
	"AP//Q+EbG28bAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
