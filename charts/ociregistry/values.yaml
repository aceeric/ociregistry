# -- Specifies the images. You can populate `tag` or `digest` or both.
# @default -- see sub-fields
image:
  ociregistry:
    # -- The image registry
    registry: quay.io
    # -- The image repository
    repository: appzygy/ociregistry
    # -- The image tag
    tag: 1.9.3
    # -- Specify a digest to use instead of the tag
    digest:
    # -- The image pull policy
    pullPolicy: IfNotPresent

# -- Supports pulling the image from a registry that requires authentication
imagePullSecrets: []

# -- Overrides the default naming logic.
nameOverride: ""

# -- Overrides the default naming logic.
fullnameOverride: ""

# -- Defines the service account configuration
# @default -- See sub-fields
serviceAccount:
  # -- Creates a service account for the server
  create: true
  # -- Automounts a token
  automount: true
  # -- Provide any additional annotations you need
  annotations: {}
  # -- Overrides the default service name
  name: ""

# -- Provide any additional pod annotations
podAnnotations: {}

# -- Provide any additional pod labels
podLabels: {}

# -- Provide any additional pod security context
podSecurityContext: {}

# -- Provide any additional deployment security context
securityContext: {}

# -- service defines the Service resource. To serve inside the cluster for
# other cluster workloads or containerd, specify `NodePort`. To serve behind an
# ingress for workloads outside the cluster, specify `ClusterIP`.
# @default -- See sub-fields
service:
  type: NodePort
  nodePort: 31080
  port: 8080

# -- Specify a port here and the server will add readiness and liveness probes to
# the server deployment. You can achieve the same effect with
# `serverConfig.configuration.health=8081`
# (or some other value.)
# @default -- `port: 8081`
health:
  port: 8081

# -- Configures the server to serve over TLS. Works two ways: if `secretName` is empty,
# then the chart creates a secret in the cluster called "releasename"-tls. If `secretName`
# is provided then uses the provided secret to configure TLS. (The secret is expected to
# already exist in the cluster namespace.) In both cases, the secret keys are expected as
# `tls.crt`, `tls.key`, and `ca.crt`. The secret is mounted into the server deployment and
# the server is configured to terminate TLS for clients (e.g. containerd). The composition
# of the secret affects how the server configures the TLS handshake. Valid permutations are:
# 1) `tls.crt` and `tls.key` for 1-way TLS. 2) `tls.crt`, `tls.key` and `clientAuth=verify`
# for mTLS using the OS (container) trust store. 3) `tls.crt`, `tls.key`, `ca.crt` and
# `clientAuth=verify` for mTLS using the CA from the secret.
# @default -- `enabled: false`
serverTls:
  enabled: false
  secretName:
  cert:
  key:
  ca:
  # -- valid values are `none` and `verify`.
  clientAuth: none

# -- Configures an ingress for access to the registry outside the cluster. (Could
# be used to run the registry in one cluster to cache for multiple other clusters.)
# @default -- `enabled: false`
ingress:
  enabled: false
  className: ""
  annotations: {}
  # To serve on other than "/":
  #  nginx.ingress.kubernetes.io/use-regex: "true"
  #  nginx.ingress.kubernetes.io/rewrite-target: /$2
  # TLS pass-through if TLS enabled on the server
  #  nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  #  nginx.ingress.kubernetes.io/ssl-passthrough: "true"
  #  nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts: []
  # Example
  # - host: somehost.my.org
  #   paths:
  #   - path: /
  #   - path: /ociregistry(/|$)(.*)
  #     pathType: ImplementationSpecific
  tls: []
  # Example
  #- secretName: chart-example-tls
  #  hosts:
  #  - somehost.my.org

# -- Specify requests and limits. Manifests are cached in memory to speed response
# time. Volumetrics are forthcoming in a future release. If I run the server as a systemd
# service and inspect it with the "glances" utility, glances reports 11 meg of resident
# RAM with no images cached, and 14 meg of resident RAM with 60 images cached...
resources: {}

# -- Use this to mount other volumes.
volumes: []

# -- Volume Mounts provides the container mount paths. Since this is a caching
# registry it needs a place to store image data.
# @default -- See sub-fields
volumeMounts:

# -- Specifies  where to mount the storage for the image cache.
- name: images
  # -- Shows the default value hard-coded into the server unless overridden
  mountPath: /var/lib/ociregistry
  readOnly: false

# -- Defines a node selector
nodeSelector: {}

# -- Defines Pod tolerations
tolerations: []

# -- Defines Pod affinity
affinity: {}

priorityClassName: ""

# -- Allows the addition of sidecar containers
sidecarContainers: []

# -- Allows the addition of init containers, e.g. to initialize persistent storage permissions
# if needed.
initContainers: []
# Example
# - name: pvc-permissions
#   image: busybox:latest
#   env:
#     - name: UID
#       value: "1000"
#     - name: GID
#       value: "1000"
#     - name: MNTPATH
#       value: /var/lib/ociregistry
#   command: ["sh", "-c", "chown -R $UID:$GID $MNTPATH && chmod -R 755 $MNTPATH"]
#   volumeMounts:
#     - name: images
#       mountPath: /var/lib/ociregistry

# -- [Deployment Strategy](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy).
deploymentStrategy:
  type: Recreate

# -- Persistence establishes the persistence strategy. For ephemeral storage (i.e. for
# testing or experimentation) the `emptyDir` option is enabled by default. If you have a storage
# provisioner, enable the `persistentVolumeClaim` option. The `hostPath` option uses
# host storage. Setting either persistentVolumeClaim` or `hostPath` to `enabled=true` will
# override (disable) `emptyDir`.
# @default -- See sub-fields
persistence:
  # -- Creates a PVC for persistent storage. If enabled, don't also enable `hostPath`.
  # @default -- See sub-fields
  persistentVolumeClaim:
    # -- Persistent storage is disabled by default. Set to `true` to enable persistent storage
    enabled: false
    # -- If you will bind to an existing PVC, specify the name here, otherwise leave
    # the name blank and fill in the `newClaimSpec` hash.
    existingClaimName: ""
    # -- Supply the parameters for a new PVC
    # @default -- See sub-fields
    newClaimSpec:
      # -- Access mode(s) supported by the storage class
      accessModes:
      - ReadWriteOnce
      # -- Volume mode supported by the storage class
      volumeMode: Filesystem
      # -- Required storage capacity
      resources:
        requests:
          storage: 2Gi
      # -- Leave the storage class empty to select the default cluster storage
      # class, or specify a class if multiple are available
      storageClassName: ""
      # -- specify any necessary storage selectors.
      selector: {}
      #  matchLabels: {}
      #  matchExpressions: []
  # -- Implements host path storage for the server. Suitable for testing and a quick
  # capability evaluation. If enabled, don't also enable `persistentVolumeClaim`.
  # @default -- See sub-fields
  hostPath:
    # -- Host path is disabled by default
    enabled: false
    type: DirectoryOrCreate
    # -- By default the server will use this path for image storage. If you mount the
    # storage at some other path you must match it in the `imagePath` value in
    # `serverConfig.configuration` below.
    path: /var/lib/ociregistry
  # -- Implements Empty Dir storage for the server. Suitable for testing and a quick
  # capability evaluation.
  # @default -- See sub-fields
  emptyDir:
    # -- This is the default option to facilitate a quick start
    enabled: true
    # -- Provides a size limit to the storage
    sizeLimit: 2Gi

# -- Deploys the listed resources into the cluster.
extraManifests: []
#  - apiVersion: v1
#    kind: ConfigMap
#    metadata:
#      name: my-cm
#    data:
#      foo: bar

# -- Supports overriding default (built-in) configuration. If you override
# `serverConfig.configuration.imagePath` then override this value elsewhere
# to match. The values shown are the defaults hard-coded in the binary, except
# for `logLevel` which defaults to `error` and is overridden below as `info`.
# The explicit values are provided mainly for documentation purposes. The `os`
# and `arch` by default are determined by the system hosting the server so
# typically you will not specify those.
# @default -- See sub-fields
serverConfig:
  mountPath: /var/ociregistry/config
  # -- You must override each field. Or null out the config and run with all
  # defaults. E.g.: `configuration: null`
  # @default -- See sub-fields
  configuration:
    imagePath: /var/lib/ociregistry
    logLevel: info
    logFile:
    preloadImages:
    imageFile:
    port: 8080
    #os: linux
    #arch: amd64
    pullTimeout: 60000
    alwaysPullLatest: false
    airGapped: false
    helloWorld: false
    # -- easier to use `health` above
    health:
    registries: []
    # -- Pruning is disabled by default
    # @default -- See sub-fields
    pruneConfig:
      enabled: false
      duration: 30d
      type: accessed
      frequency: 1d
      count: -1
      dryRun: false
    # serverTlsConfig is configured using the `serverTls`value above. Hence
    # commented out here. (Shown here only for documentation purposes.)
    #serverTlsConfig:
    #  cert:
    #  key:
    #  ca:
    #  clientAuth:
