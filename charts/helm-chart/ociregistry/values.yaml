image:
  registry: quay.io
  repository: appzygy/ociregistry
  tag: 1.0.0
  digest:
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# The program defaults coded into the server go code are shown below. To override,
# uncomment and re-define the values. The configPath does not need to be defined if
# upstreamConfig is defined. However, if  you specify both, the 'configPath' value
# must match 'upstreamConfig.mountPath'. If you change the port, you must also change
# the 'service.port' value.
configs:
  logLevel: info
  #port: 8080
  #configPath:
  #imagePath: /var/lib/ociregistry
  #pullTimeout: 60000

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}

securityContext: {}

# if you change the 'port', you must also specify
# the --port in the 'configs' section. A NodePort service
# makes the registry available to containerd on each host.
# Each containerd instance can be configured to mirror to
# the registry using its own hostname. E.g.:
#
# cat /etc/containerd/certs.d/_default/hosts.toml
#
# Result:
#
# [host."localhost:31080"]
#   capabilities = ["pull", "resolve"]
#   skip_verify = true
service:
  type: NodePort
  port: 8080
  nodePort: 31080

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
  #- secretName: chart-example-tls
  #  hosts:
  #  - chart-example.local

resources: {}

#volumes:
#- name: my-other-volume
#  emptyDir: {}

# Since this is a caching pull-through registry it needs a place to
# store image data. The default in the server code is shown below.
# When you select a 'persistence' type, a volume will be templated
# named 'images'. By default the server will look in the path below.
# if you mount the storage at some other path you must change the
# 'configs.imagePath' to match.
volumeMounts:
- name: images
  mountPath: /var/lib/ociregistry
  readOnly: false

nodeSelector: {}

tolerations: []

affinity: {}

# for ephemeral storage (i.e. for testing or trying it out) enable the
# emptyDir option. If you have a storage provisioner enable the persistentVolumeClaim
# option. The hostPath option uses host storage.
persistence:
  persistentVolumeClaim:
    enabled: true
    claimName: registry
    spec:
      accessModes:
      - ReadWriteOnce
      volumeMode: Filesystem
      resources:
        requests:
          storage: 2Gi
      storageClassName:
      #selector:
      #  matchLabels: {}
      #  matchExpressions: []
  hostPath:
    enabled: false
    type: DirectoryOrCreate
    path: /var/lib/ociregistry
  emptyDir:
    enabled: false
    sizeLimit: 2Gi

# upstreamConfig supports providing auth and TLS configuration
# for upstream registries.
#upstreamConfig:
#  mountPath: /var/ociregistry/config
#  registries:
#  - name: my-upstream:8800
#    description: Basic auth, mTLS with mounted CA
#    auth:
#      user: frobozz
#      password: flathead
#    tls:
#      ca:   /etc/pki/certs/ca.crt
#      cert: /etc/pki/certs/client.crt
#      key:  /etc/pki/certs/client.key
